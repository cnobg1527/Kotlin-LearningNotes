1.兰姆达表达式语法
  lambda 表达式的完整句法形式如下：
  val sum: (Int, Int) -> Int = { x: Int, y: Int -> x + y }
  lambda 表达式始终被大括号包围，完整句法形式的参数声明进入大括号内部，并具有可选的类型注释，正文将转到符号之后。

  如果我们删除所有可选注释，则剩下的内容如下所示：
  val sum = { x: Int, y: Int -> x + y }

2.在 Kotlin 中，有一个约定：如果函数的最后一个参数是函数，则作为相应参数传递的 lambda 表达式可以放置在括号之外：
  val product = items.fold(1) { acc, e -> acc * e }
  这样的语法也被称为尾随的lambda。

  如果 lambda 是该调用的唯一参数，则可以完全省略括号：
  run { println("...") }

3.it：单个参数的隐式名称
  lambda 表达式只有一个参数，这是很常见的。
  ints.filter { it > 0 }

4.如果 lambda 参数未使用，可以放置下划线而不是其名称：
  map.forEach { _, value -> println("$value!") }


5.匿名函数
  上面显示的 lambda 表达式语法缺少的一件事是指定函数的返回类型的能力。
  在大多数情况下，这是不必要的，因为返回类型可以自动推断。但是，如果确实需要显式指定它，可以使用替代语法：匿名函数。
  fun(x: Int, y: Int): Int = x + y
  匿名函数看起来非常像常规函数声明，只不过省略了其名称。其正文可以是表达式（如上所示）或块：
  fun(x: Int, y: Int): Int {
      return x + y
  }
  参数和返回类型的指定方式与常规函数的指定方式相同，但参数类型可以从上下文推断出参数类型时可以省略：
  ints.filter(fun(item) = item > 0)








